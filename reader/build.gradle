apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            jni.srcDirs = []
            jniLibs.srcDirs = ['src/main/jniLibs', 'libs']
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn CopyToJniLibs
}

//task ndkBuild(type: Exec, description: 'Compile JNI source via NDK') {
//    Properties properties = new Properties()
//    properties.load(project.rootProject.file('local.properties').newDataInputStream())
//    def ndkDir = properties.getProperty('ndk.dir')
//    commandLine "$ndkDir", "NDK_PROJECT_PATH=$projectDir.absolutePath\\build",
//            "APP_BUILD_SCRIPT=$projectDir.absolutePath\\src\\main\\jni\\Android.mk",
//            "NDK_APPLICATION_MK=$projectDir.absolutePath\\src\\main\\jni\\Application.mk"
//}

task CopyToJniLibs(type: Copy, description: 'copy the native libs to jniLibs') {
    from fileTree(dir: file(buildDir.absolutePath + '/libs'), include: '**/*.so')
    into file('src/main/jniLibs')
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0-beta01'
    implementation 'com.google.android.material:material:1.0.0'
}
